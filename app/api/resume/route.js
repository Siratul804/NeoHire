import { NextResponse } from "next/server";
import { PdfReader } from "pdfreader";
import fs from "fs/promises";
import path from "path";
import os from "os";
import Groq from "groq-sdk";
import { jobData } from "@/data/jobs";

const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
});

export async function POST(req) {
  try {
    const body = await req.json();
    const { file } = body;

    const base64Data = file.replace(/^data:application\/pdf;base64,/, "");
    const buffer = Buffer.from(base64Data, "base64");
    const tempDir = os.tmpdir();
    const tempFilePath = path.join(tempDir, "temp-file.pdf");

    // Write PDF file
    await fs.writeFile(tempFilePath, buffer);

    // Parse PDF
    const parsedText = await new Promise((resolve, reject) => {
      let fullText = "";
      new PdfReader().parseFileItems(tempFilePath, (err, item) => {
        if (err) {
          reject("Error during PDF parsing: " + err);
        } else if (!item) {
          resolve(fullText);
        } else if (item.text) {
          fullText += item.text;
        }
      });
    });

    // Delete temp file
    await fs.unlink(tempFilePath);
    const formattedText = parsedText.replace(/(\r\n|\n|\r)/g, " ");

    // Generate dynamic feedback and extract resume details from AI
    async function generateResume(formattedText) {
      const systemPrompt = `
               You are an AI specialized in resume analysis. Based on the uploaded resume text, please:
1.  Provide 3-4 lines of constructive and detailed feedback that will help the user to improve their resume in a "feedback" key.
2. Extract key resume details including "extractedSkills", "extractedExperience", "extractedProjects", and an "aiScore".
3. Also include a "jobOptions" key which should be an array of up to 3 jobs from the following list (match by skill):
${JSON.stringify(jobData, null, 2)}
Only return a valid JSON object following this exact schema:

{
  "feedback": String,
  "extractedSkills": [String],
  "extractedExperience": [ { "company": String, "role": String, "duration": Number } ],
  "extractedProjects": [String],
  "aiScore": Number,
  "jobOptions": [ { job object } ]
}

Do not add any extra text or explanation. Return only the JSON object.
  `;

      const chatCompletion = await groq.chat.completions.create({
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: `Analyze this resume: ${formattedText}` },
        ],
        model: "llama-3.3-70b-versatile",
        temperature: 0.7,
        max_tokens: 1000,
      });

      let aiResponse = chatCompletion.choices[0].message.content.trim();
      // Remove code block markers and extra whitespace
      let cleanedResponse = aiResponse.replace(/```/g, "").trim();
      console.log("Cleaned AI response:", cleanedResponse);
      return cleanedResponse;
    }

    const aiResponseJSON = await generateResume(formattedText);
    if (!aiResponseJSON) {
      return NextResponse.json(
        { error: "Failed to analyze resume." },
        { status: 500 }
      );
    }

    let resumeData;
    try {
      resumeData = JSON.parse(aiResponseJSON);
    } catch (error) {
      console.error("Invalid JSON received:", aiResponseJSON);
      return NextResponse.json(
        { error: "Invalid JSON format received from AI." },
        { status: 500 }
      );
    }

    // If jobOptions is not generated by AI, match jobs based on extractedSkills manually
    if (!resumeData.jobOptions || resumeData.jobOptions.length === 0) {
      // Ensure extractedSkills exists and is an array
      const skills = Array.isArray(resumeData.extractedSkills)
        ? resumeData.extractedSkills
        : [];
      const matchingJobs = jobData
        .filter(
          (job) =>
            job.skills && job.skills.some((skill) => skills.includes(skill))
        )
        .slice(0, 3);
      resumeData.jobOptions = matchingJobs;
    }

    return NextResponse.json(
      {
        message: "Resume analysis completed.",
        resumeData,
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error during resume analysis:", error);
    return NextResponse.json(
      {
        error: "An error occurred during resume processing. Please try again.",
      },
      { status: 500 }
    );
  }
}
